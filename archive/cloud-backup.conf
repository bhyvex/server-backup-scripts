#!/bin/bash
#
#  Config file for duplicity backup of Owncloud Database, Owncloud Install, and Owncloud Data
#  
#
# ------------------------------------------------------------------------------
# BACKUP SOURCE INFORMATION
# ------------------------------------------------------------------------------
#
ROOT="/"

# ------------------------------------------------------------------------------
# BACKUP DESTINATION INFORMATION
# ------------------------------------------------------------------------------
# Use this when bucket not a website.  Need endpoint per AWS S3
DEST="s3://s3-us-west-2.amazonaws.com/cloud-backup.kebler.net"
# Use this if bucket set up as 
#DEST="s3+http://server.kebler.net/backup/"
#Use this for testing setup with writing to bucket
#DEST="file:///mnt/testing"


# ------------------------------------------------------------------------------
# AMAZON S3 INFORMATION
# ------------------------------------------------------------------------------
# Instead of here have credentials file in .aws as that's where boto will find them.
# AWS_ACCESS_KEY_ID=""
# AWS_SECRET_ACCESS_KEY=""

# ------------------------------------------------------------------------------
# INCLUDE LIST OF DIRECTORIES
# ------------------------------------------------------------------------------
# shouldn't need this if backing up at root (above).  Otherwise for additional inclusions.
INCLIST=("/root/.backups/databases/owncloud" "/var/www/owncloud" "/mnt/data/oc-data")

# ------------------------------------------------------------------------------
# EXCLUDE LIST OF DIRECTORIES
# ------------------------------------------------------------------------------
# file of exclusions is deprecated, put them this here.

EXCLIST=(  "/**/cache/*")

# ------------------------------------------------------------------------------
# ENCRYPTION INFORMATION
# ------------------------------------------------------------------------------


ENCRYPTION='no'

# If you are NOT running this from a cron, comment this line out
# and duplicity should prompt you for your password.
# Otherwise this password is either used for symmetric encryption
# (your backups will be encrypted with this password) or is used
# for the "GPG_SIGN_KEY" (see below).
# Comment out if you aren't using encryption
# Note: if you have a '$' in your passphrase, escape it with a '\'

#PASSPHRASE="828689"

# Specify which GPG keys you would like to use (even if you have only one).
# If you are running this from a cron, it is highly recommended to create separate
# signature and encryption keys, because you have to specify the password for the
# GPG_SIGN_KEY via the above PASSPHRASE variable
# (see http://www.debian-administration.org/articles/209#d0e109).
# If you are not running the script from a cron, duplicity should prompt you for the
# GPG_SIGN_KEY password.
# If you choose to use the same GPG key for encryption and signature, set it both
# in GPG_ENC_KEY and GPG_SIGN_KEY.
# Comment out if you're using only PASSPHRASE (symmetric encryption) or not using
# encryption at all.

#GPG_ENC_KEY="foobar_gpg_key"
#GPG_SIGN_KEY="foobar_gpg_key"

# Do you want to hide the key id of the encrypted files? yes/no
# It uses the gpg's --hidden-recipient command to obfuscate the owner of the backup.
# On restore, gpg will automatically try all available secret keys in order to
# decrypt the backup. See gpg(1) for more details.
#
# HIDE_KEY_ID='yes'

# You can optionally specify the secret keyring file to use for the encryption and
# signing keys. If not specified, the default secret keyring is used which is
# usually located at ~/.gnupg/secring.gpg
#
#SECRET_KEYRING="/home/foobar_user_name/.gnupg/duplicity.gpg


# ------------------------------------------------------------------------------
# STATIC BACKUP OPTIONS
# ------------------------------------------------------------------------------
#
# Here you can define the static backup options that you want to run with
# duplicity. Reference is the manpage of duplicity (available at

# make a full backup every 14 days.
STATIC_OPTIONS="--full-if-older-than 14D"

# ------------------------------------------------------------------------------
# FULL BACKUP & REMOVE OLDER THAN SETTINGS
# ------------------------------------------------------------------------------
#
# Because duplicity will continue to add to each backup as you go,
# it will eventually create a very large set of files.  Also, incremental
# backups leave room for problems in the chain, so doing a "full"
# backup every so often is not a bad idea.
#
# You can remove older than a specific time period:
#
#CLEAN_UP_TYPE="remove-older-than"
#CLEAN_UP_VARIABLE="31D"
#
# Or, If you would rather keep a certain (n) number of full backups (rather
# than removing the files based on their age), you can use what I use:

CLEAN_UP_TYPE="remove-all-but-n-full"
CLEAN_UP_VARIABLE="4"

# The third option is to skip cleanup altogether, by:
#
#CLEAN_UP_TYPE="none"
#
# In combination with "remove-older-than" clean-up type, you may want
# to keep only the full backups older than (n) number backup sets. For example,
# let's say you set to CLEAN_UP_TYPE="remove-older-than", CLEAN_UP_VARIABLE
# to "6M" (six months), STATIC_OPTIONS to "--full-if-older-than 7D"
# (a full backup every 7 days), and you execute duplicity-backup once a day.
# After six months you'll have 25 full backups, each with daily incrementals
# in between. Perhaps you're keeping the backups past 1 month "just in case",
# and so the older incrementals are overkill â€“ weekly full backups beyond
# one month backward would suffice. In this case you can set
# "REMOVE_INCREMENTALS_OLDER_THAN to, say, "4" which will delete the
# incrementals for backup sets beyond the four most recent, keeping
# only the full weekly backups for those backup sets. The incrementals
# for the four most recent backup sets remain untouched.
#
REMOVE_INCREMENTALS_OLDER_THAN="4"


# ------------------------------------------------------------------------------
# LOGFILE INFORMATION DIRECTORY
# ------------------------------------------------------------------------------
#
# Provide directory for logfile, ownership of logfile & directory, and verbosity level.
# I run this script as root, but save the log files under my user name --
# just makes it easier for me to read them and delete them as needed.

LOGDIR="/root/backup-scripts/logs/"
LOG_FILE="duplicity-`date +%Y-%m-%d_%H-%M`.txt"
LOG_FILE_OWNER="root:root"

# Note that if the configured LOGDIR does not exist it will be created
# and its owner:group set to that of the configured LOG_FILE_OWNER.
# If the configured LOGDIR already exists no change to owner:group is attempted.
#
#REMOVE_LOGS_OLDER_THAN='30' # (days) uncomment to activate

VERBOSITY="-v3"

# Set the tmpdir for duplicity to use.
#TMPDIR="/tmp"


# ------------------------------------------------------------------------------
# EMAIL ALERT (*thanks: rmarescu*)
# ------------------------------------------------------------------------------
#

EMAIL_TO="dgkebler@gmail.com"
EMAIL_FROM=
EMAIL_SUBJECT="Backup of AWS EC2 Owncloud Install to S3 cloud-backup.kebler.net"

# command to use to send mail
MAIL="mailx"     # default command for Linux mail



# ------------------------------------------------------------------------------
# TROUBLESHOOTING
# ------------------------------------------------------------------------------
#
#ECHO=$(which echo)
